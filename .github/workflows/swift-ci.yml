name: Swift CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Swift Package
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: ['16.4']
        ios-version: ['17.0']

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}

    - name: 📊 Swift Version
      run: swift --version

    - name: 🧹 Clean Build
      run: |
        rm -rf .build
        swift package clean

    - name: 🔍 Resolve Dependencies
      run: swift package resolve

    - name: 🏗️ Build Package
      run: swift build --configuration release

    - name: 📊 Generate Coverage Report
      run: |
        CODECOV_PROFILE=$(swift test --show-codecov-path)
        TEST_BIN_PATH=$(swift build --show-bin-path)
        echo "Using coverage data at $CODECOV_PROFILE"
        xcrun llvm-cov export -format="lcov" \
          "$TEST_BIN_PATH/WeaveDIPackageTests.xctest/Contents/MacOS/WeaveDIPackageTests" \
          -instr-profile "$CODECOV_PROFILE" > coverage.lcov

    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        fail_ci_if_error: true

  performance-benchmark:
    name: Performance Benchmark
    runs-on: macos-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 📥 Checkout Base Branch
      run: |
        git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: 🏗️ Build Current Branch
      run: |
        swift build --configuration release

    - name: 📊 Run Performance Benchmarks (Current)
      run: |
        # 새로운 벤치마크 시스템 실행
        swift run Benchmarks --quick --json current_benchmarks.json 2>&1 | tee current_performance.log

        # 호환성을 위한 레거시 테스트도 실행
        swift test --filter PerformanceTests 2>&1 | tee -a current_performance.log

    - name: 🔄 Switch to Base Branch
      run: |
        git checkout ${{ github.base_ref }}
        swift package clean

    - name: 🏗️ Build Base Branch
      run: |
        swift build --configuration release

    - name: 📊 Run Performance Benchmarks (Base)
      run: |
        # 새로운 벤치마크 시스템 실행
        swift run Benchmarks --quick --json base_benchmarks.json 2>&1 | tee base_performance.log

        # 호환성을 위한 레거시 테스트도 실행
        swift test --filter PerformanceTests 2>&1 | tee -a base_performance.log

    - name: 📈 Generate Performance Report
      run: |
        echo "## 🚀 Performance Benchmark Report" > performance_report.md
        echo "" >> performance_report.md

        # 벤치마크 요약 정보 추가
        if [ -f "current_benchmarks.json" ] && [ -f "base_benchmarks.json" ]; then
          echo "### 📊 Benchmark Comparison" >> performance_report.md
          echo "" >> performance_report.md

          # 간단한 성능 비교 (jq 없이)
          echo "| Metric | Current Branch | Base Branch | Difference |" >> performance_report.md
          echo "|--------|----------------|-------------|------------|" >> performance_report.md
          echo "| Benchmark Type | New System | New System | - |" >> performance_report.md

          # 현재 브랜치 요약
          if grep -q "📊 Total operations" current_performance.log; then
            CURRENT_OPS=$(grep "📊 Total operations" current_performance.log | head -1 | sed 's/.*: //')
            CURRENT_TIME=$(grep "⏱️ Total time" current_performance.log | head -1 | sed 's/.*: //')
            CURRENT_THROUGHPUT=$(grep "🚀 Average throughput" current_performance.log | head -1 | sed 's/.*: //')

            echo "| Total Operations | $CURRENT_OPS | - | - |" >> performance_report.md
            echo "| Total Time | $CURRENT_TIME | - | - |" >> performance_report.md
            echo "| Avg Throughput | $CURRENT_THROUGHPUT | - | - |" >> performance_report.md
          fi

          echo "" >> performance_report.md
        fi

        echo "### 📈 Current Branch Performance:" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        # 벤치마크 요약만 포함 (로그가 너무 길 수 있으므로)
        if grep -q "📊" current_performance.log; then
          grep -E "(📊|⏱️|🚀|✅)" current_performance.log | head -20 >> performance_report.md
        else
          cat current_performance.log >> performance_report.md
        fi
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md

        echo "### 📉 Base Branch Performance:" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        if grep -q "📊" base_performance.log; then
          grep -E "(📊|⏱️|🚀|✅)" base_performance.log | head -20 >> performance_report.md
        else
          cat base_performance.log >> performance_report.md
        fi
        echo "\`\`\`" >> performance_report.md

        echo "" >> performance_report.md
        echo "### 🎯 Performance Analysis" >> performance_report.md
        echo "- **Benchmark System**: WeaveDI Advanced Benchmark Suite" >> performance_report.md
        echo "- **Test Mode**: Quick mode (optimized for CI)" >> performance_report.md
        echo "- **Platform**: $(uname -m)" >> performance_report.md
        echo "- **Swift Version**: $(swift --version | head -1)" >> performance_report.md

    - name: 💬 Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance_report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # quality-check:
  #   name: Code Quality Check
  #   runs-on: macos-latest

  #   steps:
  #   - name: 📥 Checkout
  #     uses: actions/checkout@v4

  #   - name: 🔧 Install SwiftLint
  #     run: |
  #       brew install swiftlint

  #   - name: 🔍 Run SwiftLint
  #     run: |
  #       swiftlint lint --reporter github-actions-logging

  release:
    name: Create Release
    runs-on: macos-latest
    if: github.event_name == 'release'

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4'

    - name: 🏗️ Build Release
      run: |
        swift build --configuration release

    - name: 📦 Create Release Archive
      run: |
        tar -czf WeaveDI-${{ github.event.release.tag_name }}.tar.gz \
          Sources/ Package.swift README.md LICENSE

    - name: 📤 Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./WeaveDI-${{ github.event.release.tag_name }}.tar.gz
        asset_name: WeaveDI-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔄 Trigger Documentation Build
      run: |
        echo "Documentation will be automatically updated by deploy.yml workflow"
